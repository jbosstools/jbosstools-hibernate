<?xml version="1.0" encoding="UTF-8"?>
<chapter id="codegenarchitecture">
	<title>Code generation architecture</title>

	<para>
		This section outlines and explains the code generation mechanism in <productname>Hibernate Tools</productname>. The overall structure of this mechanism is the same as that used for the <productname>Ant</productname> and <productname>Eclipse</productname> tools.
	</para>

	<section>
		<title>Hibernate Meta Model</title>

		<para>
			The meta model is the model used by <productname>Hibernate Core</productname> to perform its object relational mapping. The model includes information about tables, columns, classes, properties, components, values, collections etc. The API is in the <code>org.hibernate.mapping</code> package and its main entry point is the <code>Configuration</code> class: the same class that is used to build a session factory.
		</para>

		<para>
			The model represented by the <code>Configuration</code> class can be built in many ways:
		</para>

		<para>
			<itemizedlist>
				<listitem>
					<para>
						A Core configuration uses <productname>Hibernate Core</productname> and supports reading <filename>hbm.xml</filename> files, and requires a <filename>hibernate.cfg.xml</filename> file. This is referred to as <emphasis>Core</emphasis> in Eclipse and <code>&lt;configuration&gt;</code> in Ant.
					</para>
				</listitem>

				<listitem>
					<para>
						An Annotation configuration uses <productname>Hibernate Annotations</productname>, supports <filename>hbm.xml</filename> files and annotated classes, and requires a <filename>hibernate.cfg.xml</filename> file. This is referred to as <emphasis>Annotations</emphasis> in Eclipse and <code>&lt;annotationconfiguration&gt;</code> in Ant.</para>
				</listitem>

				<listitem>
					<para>
						A JPA configuration uses a <productname>Hibernate EntityManager</productname> and supports <filename>hbm.xml</filename> files and annotated classes, and requires that the project has a <filename>META-INF/persistence.xml</filename> file in its classpath. This is referred to as <emphasis>JPA</emphasis> in Eclipse and <code>&lt;jpaconfiguration&gt;</code> in Ant.</para>
				</listitem>

				<listitem>
					<para>
						A JDBC configuration uses <property>Hibernate Tools</property> reverse engineering and reads its mappings via JDBC metadata along with additional reverse engineering files (<filename>reveng.xml</filename>). Automatically used in Eclipse when doing reverse engineering from JDBC and referred to as <code>&lt;jdbcconfiguration&gt;</code> in Ant.</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			In most projects you will normally use only one of the <emphasis>Core</emphasis>, <emphasis>Annotation</emphasis> or <emphasis>JPA</emphasis> configuration and possibly the JDBC configuration if you are using the reverse engineering facilities of <productname>Hibernate Tools</productname>. 
		</para>

<!--		<note>
			<title>Note:</title>
			<para>Hibernate Tools has support for all kinds of Hibernate Configurations.</para>
		</note>  --> <!-- Removed useless note -->

		<para>The following drawing illustrates the core concepts:</para>

		<para>
			<figure>
				<title>Hibernate Core Concepts</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata fileref="images/code_generation/code_generation_1.png" format="PNG"/>
					</imageobject>

					<imageobject role="html">

						<imagedata align="center" fileref="images/code_generation/code_generation_1.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</para>

		<para>
			The code generation is performed based on the Configuration model no matter which type of configuration has been used to create the meta model, and thus the code generation is independent from the source of the meta model and represented via Exporters.
		</para>
	</section>

	<section>
		<title>Exporters</title>

		<para>
			Code generation is performed by Exporters. An <emphasis>Exporter</emphasis> is handed a Hibernate Meta Model represented as a <code>Configuration</code> instance, and it is then the job of the exporter to generate a set of code artifacts.
		</para>

		<para>
			The tool provides a default set of Exporters which can be used in both Ant and the Eclipse UI. Documentation for these Exporters can be found in <xref linkend="ant"/> and <xref linkend="plugins"/>.
		</para>

		<para>
			Users can provide their own custom Exporters, either through custom classes implementing the <code>Exporter</code> interface or simply through custom templates. This is documented at in <xref linkend="hbmtemplate"/>.
		</para>
	</section>
</chapter>
