<?xml version="1.0" encoding="UTF-8"?>
<chapter id="plugins" role="updated">
	<title>Eclipse Plugins</title>
	<para>
		This chapter will introduce you to the set of wizards and editors provided by <productname>Hibernate Tools</productname> within Eclipse, which are designed to simplify working with <productname>Hibernate</productname>.
	</para>
	<section>
		<title>Introduction</title>
		<para>
			Hibernate Eclipse Tools includes wizards for creating Hibernate mapping files, configuration files (<filename>.cfg.xml</filename>), <filename>reveng.xml</filename> files as well as wizards for adjusting Console Configuration and Code Generation. Special structured and XML editors and editors for executing HQL and Criteria queries are also provided in Hibernate Console. Refer to <xref linkend="hibernate_key_features"/> to find all the benefits that are provided by these tools within Eclipse.
		</para>
		<note>
			<title>Note:</title>
			<para>
				Note that these tools do not hide any of <productname>Hibernate</productname>'s functionality; rather the tools make working with <productname>Hibernate</productname> easier. You are still encouraged to read the <ulink url="http://hibernate.org/docs">Hibernate Documentation</ulink> in order to be able to fully utilize <productname>Hibernate Tools</productname> and especially <productname>Hibernate</productname> itself.
			</para>
		</note>
		<section id="download_base_project">
			<title>Download base project</title>
			<para>You can download the example projects that are used in this chapter. A <property>JPA base project</property> is available on the <ulink url="http://docs.jboss.org/tools/resources/">documentation resources page</ulink>  together with a <ulink url="http://docs.jboss.org/tools/resources/TestHibernateproject_for_hibernate_jboss_tools.zip">base Java project</ulink>. Additionally, start the database using the files available <ulink url="http://docs.jboss.org/tools/resources/GSG_database.zip">here</ulink>.</para>
			<note>
				<title>Note:</title>
				<para>The steps for running the database are documented in the <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_JBoss_Developer_Studio/4.1/html-single/Getting_Started_Guide/index.html#start_dev_db">Getting Started Guide</ulink>.</para>
			</note>
		</section>
	</section>
	<section id="map_file_wizard">
		<title>Creating a Hibernate Mapping File</title>
		<para>Hibernate mapping files are used to specify how your objects relate to database tables.</para>
		<para>
			To create basic mappings for properties and associations, i. e. generate <filename>.hbm.xml</filename> files, Hibernate Tools provide a basic wizard which you can display by selecting <menuchoice><guimenuitem>File</guimenuitem><guimenuitem>New</guimenuitem><guimenuitem>Hibernate XML mapping files</guimenuitem></menuchoice>.
		</para>
		<para>
			At first you will be asked to select a package or multiple individual classes to map. It is also possible to create an empty file: do not select any packages or classes and an empty <filename>.hbm</filename> file will be created in the specified location.
		</para>
		<para id="depth_control">
			Using the <property>depth control</property> option you can define the dependency depth used when choosing classes. 
		</para>
		<figure>
			<title>Hibernate XML Mapping File Wizard</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/plugins_0.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			The next wizard page lists the mappings to be generated. You can see the <guilabel>Customers</guilabel>, <guilabel>Orders</guilabel>, <guilabel>Productlines</guilabel> and <guilabel>Products</guilabel> classes added under <property>depth control</property> driving.
		</para>
		<figure>
			<title>Mappings to be generated</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/plugins_0_a.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>This wizard page displays a preview of the generated <filename>.hbm</filename> files.</para>
		<figure>
			<title>Preview Generated Mapping Files</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/plugins_0_b.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>Clicking the <guibutton>Finish</guibutton> button creates the files.</para>
	</section>
	<section id="hib_config_file">
		<title>Creating a Hibernate Configuration File</title>
		<para>
			To be able to perform reverse engineering, prototype queries, and of course to simply use <property>Hibernate Core</property> a <filename>hibernate.properties</filename> or <filename>hibernate.cfg.xml</filename> file is needed. <property>Hibernate Tools</property> provides a wizard for generating the <filename>hibernate.cfg.xml</filename> file if you do not already have one.
		</para>
<!-- Testing video documentaiton 
	<figure>
		<title>Hibernate Configuration File creation</title>
		<mediaobject>
			<videoobject>
				<videodata fileref="videos/hib-config-file-creation.mp4"/>
			</videoobject>
			<textobject>
				<para>
					This video illustrates the creation of a Hibernate Configuration File for an existing project
				</para>
			</textobject>
		</mediaobject>
	</figure>
Testing video documentation -->
		<para>Start the wizard by clicking <menuchoice><guimenuitem>File</guimenuitem><guimenuitem>New</guimenuitem>
				<guimenuitem>Other</guimenuitem>
			</menuchoice> (<keycombo><keycap>Ctrl</keycap>
				<keycap>N</keycap>
			</keycombo>), then select
    
    <menuchoice><guimenuitem>Hibernate</guimenuitem>
				<guimenuitem>Hibernate Configuration File (cfg.xml)</guimenuitem>
	</menuchoice> and click the <guibutton>Next</guibutton> button.</para>
		<figure>
			<title>Hibernate Configuration File Wizard</title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata align="center" fileref="images/plugins/plugins_1.png" format="PNG"/>
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/plugins/plugins_1.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		<note>
			<title>Note:</title>
			<para>
				The contents in the combo boxes for the JDBC driver class and JDBC URL change automatically, depending on the Dialect and actual driver you have chosen.
			</para>
		</note>
		<para>
			Enter your configuration information in this dialog. Details about the configuration options can be found in <ulink url="http://docs.jboss.org/ejb3/app-server/Hibernate3/reference/en/html_single">Hibernate Reference Documentation</ulink>.
		</para>
		<para>
			Click the <guibutton>Finish</guibutton> button to create the configuration file, and after optionally creating a Console configuration, the <filename>hibernate.cfg.xml</filename> file will be automatically opened in an editor. The last option, <guilabel>Create Console Configuration</guilabel>, is enabled by default and when enabled, it will automatically use the <filename>hibernate.cfg.xml</filename> file for the basis of a Console configuration.
		</para>
	</section>
	<section id="console_conf">
		<title>Hibernate Console Configuration</title>
		<para>
			A Console configuration describes how the <property>Hibernate plugin</property> should configure <property>Hibernate</property> and what configuration files and classpaths are needed to load the POJO's, JDBC drivers etc. It is required to make use of query prototyping, reverse engineering and code generation. You can have multiple named console configurations. Normally you would just need one per project, but it is definitely possible to create more if required.
		</para>
		<section id="creat_console_conf">
			<title>Creating a Hibernate Console Configuration</title>
			<para>
				You can create a console configuration by running the <guilabel>Console Configuration Wizard</guilabel>, shown in the following screenshot. The same wizard will also be used if you are coming from the <filename>hibernate.cfg.xml</filename> wizard and had enabled the <guilabel>Create Console Configuration</guilabel> option.
			</para>
			<note>
				<title>Note:</title>
				<para>
					The wizard will look at the current selection in the IDE and try to auto-detect the appropriate settings, which you then can approve or modify to suit your needs.
				</para>
			</note>
			<para/>
			<para>The dialog consists of five tabs: </para>
			<itemizedlist>
				<listitem>
					<para>
						<guilabel>Main</guilabel>, which displays the basic and required settings</para>
				</listitem>
			</itemizedlist>
			<figure>
				<title> Creating Hibernate Console Configuration</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" fileref="images/plugins/plugins_2.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_2.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				The following table describes the available settings on the <guilabel>Main</guilabel> tab. The wizard can automatically detect the default values for most of the settings if you started the wizard with the relevant Java project or resource selected.
			</para>
			<table>
				<title>Hibernate Console Configuration Parameters</title>
				<tgroup cols="3">
					<colspec colnum="1" align="left" colwidth="1*"/>
					<colspec colnum="2" colwidth="3*"/>
					<colspec colnum="3" align="left" colwidth="1*"/>
					<thead>
						<row>
							<entry align="center">
								<para>Parameter</para>
							</entry>
							<entry align="center">
								<para>Description</para>
							</entry>
							<entry align="center">
								<para>Default value</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<para>Name</para>
							</entry>
							<entry>
								<para>The unique name of the console configuration</para>
							</entry>
							<entry>
								<para>Name of the selected project</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Type</para>
							</entry>
							<entry>
								<para>
									Choose between &quot;Core&quot;, &quot;Annotations&quot; and &quot;JPA&quot;. Note that &quot;Annotations&quot; and &quot;JPA&quot; require a running Eclipse IDE with a JDK 5 (or newer) runtime, or you will get class loading and version errors.
								</para>
								<para>
									Select a version that corresponds to your application's Hibernate version. Select a version from the drop-down box labeled <guilabel>Hibernate Version</guilabel>.
								</para>
							</entry>
							<entry>
								<para><guilabel>Core</guilabel> and <guilabel>Hibernate Version:</guilabel> 3.5</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Project</para>
							</entry>
							<entry>
								<para>The name of a Java project whose classpath should be used in the console configuration</para>
							</entry>
							<entry>
								<para>Name of the selected project</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Database connection</para>
							</entry>
							<entry>
								<para>
									DTP provided connection that you can use instead of what is defined in the <filename>cfg.xml</filename> or JPA <filename>persistence.xml</filename> files. It is possible to use an already configured Hibernate or JPA connection, or specify a new one here.
								</para>
							</entry>
							<entry>
								<para>[Hibernate Configured connection]</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Property file</para>
							</entry>
							<entry>
								<para>Path to a <filename>hibernate.properties</filename> file</para>
							</entry>
							<entry>
								<para>First <filename>hibernate.properties</filename> file found in the selected project</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Configuration file</para>
							</entry>
							<entry>
								<para>Path to a <filename>hibernate.cfg.xml</filename> file</para>
							</entry>
							<entry>
								<para>First <filename>hibernate.cfg.xml</filename> file found in the selected project</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Persistence unit</para>
							</entry>
							<entry>
								<para>Name of the persistence unit to use</para>
							</entry>
							<entry>
								<para>
									No default value (let Hibernate Entity Manager find the persistence unit or it can be defined manually using the <guibutton>Browse</guibutton> button)
								</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<note>
				<title>Tip:</title>
				<para>
					The last two settings are not required if you specify a project that has a <filename>/hibernate.cfg.xml</filename> or <filename>/META-INF/persistence.xml</filename> file in its classpath.</para>
			</note>
			<itemizedlist>
				<listitem>
					<para>
						Add the optional settings in the <guilabel>Options</guilabel> tab fields.</para>
				</listitem>
			</itemizedlist>
			<figure>
				<title>Options Tab of the Console Configuration Wizard</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/plugins_2_a.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>The next table describes the Hibernate Console Configuration options available on the <guilabel>Options</guilabel> tab.</para>
			<table>
				<title>Hibernate Console Configuration Options</title>
				<tgroup cols="3">
					<colspec colnum="1" align="left" colwidth="1*"/>
					<colspec colnum="2" colwidth="3*"/>
					<colspec colnum="3" align="left" colwidth="1*"/>
					<thead>
						<row>
							<entry align="center">
								<para>Parameter</para>
							</entry>
							<entry align="center">
								<para>Description</para>
							</entry>
							<entry align="center">
								<para>Auto detected value</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<para>Database dialect</para>
							</entry>
							<entry>
								<para>Define a database dialect. It is possible either to enter your own value or choose from list. </para>
							</entry>
							<entry>
								<para>No default value</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Naming strategy</para>
							</entry>
							<entry>
								<para>Fully qualified class name of a custom <code>NamingStrategy</code>. Only required if you use a special naming strategy.</para>
							</entry>
							<entry>
								<para>No default value</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Entity resolver</para>
							</entry>
							<entry>
								<para>Fully qualified class name of a custom <code>EntityResolver</code>. Only required if you have special XML entity includes in your mapping files.</para>
							</entry>
							<entry>
								<para>No default value</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<itemizedlist>
				<listitem>
					<para><guilabel>Classpath</guilabel> for classpath</para>
				</listitem>
			</itemizedlist>
			<figure>
				<title>Specifying Classpath in Hibernate Console Configuration</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" fileref="images/plugins/plugins_3.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_3.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>The following table specifies the parameters of the <guilabel>Classpath</guilabel> tab of the wizard.</para>
			<table>
				<title>Hibernate Console Configuration Classpath</title>
				<tgroup cols="3">
					<colspec colnum="1" align="left" colwidth="1*"/>
					<colspec colnum="2" colwidth="3*"/>
					<colspec colnum="3" colwidth="1*"/>
					<thead>
						<row>
							<entry align="center">
								<para>Parameter</para>
							</entry>
							<entry align="center">
								<para>Description</para>
							</entry>
							<entry align="center">
								<para>Auto detected value</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<para>Classpath</para>
							</entry>
							<entry>
								<para>
									The classpath for loading POJO and JDBC drivers; only needed if the default classpath of the Project does not contain the required classes. Do not add Hibernate core libraries or dependencies, they are already included. If you get ClassNotFound errors then check this list for possible missing or redundant directories or JAR files.
								</para>
							</entry>
							<entry>
								<para>Empty</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Include default classpath from project</para>
							</entry>
							<entry>
								<para>When enabled the project classpath will be appended to the classpath specified above</para>
							</entry>
							<entry>
								<para>Enabled</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<itemizedlist>
				<listitem>
					<para>
						<guilabel>Mappings</guilabel> for additional mappings</para>
				</listitem>
			</itemizedlist>
			<figure>
				<title>Specifying additional Mappings in Hibernate Console Configuration</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" fileref="images/plugins/plugins_4.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_4.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>Parameters of the <guilabel>Mappings</guilabel> tab of the <property>Hibernate Console Configuration wizard</property> are explained below:</para>
			<table>
				<title>Hibernate Console Configuration Mappings</title>
				<tgroup cols="3">
					<colspec colnum="1" align="left" colwidth="1*"/>
					<colspec colnum="2" colwidth="3*"/>
					<colspec colnum="3" colwidth="1*"/>
					<thead>
						<row>
							<entry align="center">
								<para>Parameter</para>
							</entry>
							<entry align="center">
								<para>Description</para>
							</entry>
							<entry align="center">
								<para>Auto detected value</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<para>Mapping files </para>
							</entry>
							<entry>
								<para>
									List of additional mapping files that should be loaded. Note: A <filename>hibernate.cfg.xml</filename> or <filename>persistence.xml</filename> can also contain mappings. Thus if there are duplications here, you will get "Duplicate mapping" errors when using the console configuration.
								</para>
							</entry>
							<entry>
								<para>empty</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<itemizedlist>
				<listitem>
					<para>Add common settings information in the <guilabel>Common</guilabel> tab.
					</para>
				</listitem>
			</itemizedlist>
			<figure>
				<title>Common Tab of the Console Configuration Wizard</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/plugins_4_a.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>The <guilabel>Common</guilabel> tab allows you to define the general aspects of the launch configuration including storage location, console encoding and some others.</para>
			<para>
				Clicking the <guibutton>Finish</guibutton> button creates the configuration and shows it in the <property>Hibernate Configurations view</property>.
			</para>
			<figure>
				<title>Console Overview</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" fileref="images/plugins/plugins_5.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_5.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</section>
		<section id="modif_console_conf">
			<title>Modifying a Hibernate Console Configuration </title>
			<para>When you create a Hibernate Console Configuration, you can modify it in two ways: </para>
			<itemizedlist>
				<listitem>
					<para>
						Right-click on the configuration in the <guilabel>Hibernate Configurations View</guilabel> and select <guimenuitem>Edit Configuration</guimenuitem>, or just double-click on the <guilabel>Console Configuration</guilabel> item.
          </para>
					<figure>
						<title>Opening Edit Configuration Wizard</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/plugins_4_c.png"/>
							</imageobject>
						</mediaobject>
					</figure>
					<para>
						You will then see the <guilabel>Edit Configuration Wizard</guilabel>, which is similar to <guilabel>Create Console Configuration</guilabel>, described in <xref linkend="creat_console_conf"/>. 
					</para>
				</listitem>
				<listitem>
					<para>Use the <guilabel>Properties</guilabel> view to modify the Console Configuration properties.</para>
					<figure>
						<title>Properties View</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/plugins_4_b.png"/>
							</imageobject>
						</mediaobject>
					</figure>
					<para>
						The following table describes the available settings in the <guilabel>Properties</guilabel> view. Most properties can be changed by left clicking on them, but some can not. 
						<table>
              <title>Properties</title>
							<tgroup cols="3">
								<colspec colnum="1" align="left" colwidth="1*"/>
								<colspec colnum="2" colwidth="3*"/>
								<colspec colnum="3" align="left" colwidth="1*"/>
								<thead>
									<row>
										<entry align="center">
											<para>Property</para>
										</entry>
										<entry align="center">
											<para>Description</para>
										</entry>
										<entry align="center">
											<para>Is Changeable</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>Additional mapping files </para>
										</entry>
										<entry>
											<para>Count of additional mapping files that should be loaded. </para>
										</entry>
										<entry>
											<para>False</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Configuration file</para>
										</entry>
										<entry>
											<para>Path to a <filename>hibernate.cfg.xml</filename> file</para>
										</entry>
										<entry>
											<para>False</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Connection</para>
										</entry>
										<entry>
											<para>
												DTP provided connection that you can use instead of what is in the <filename>cfg.xml</filename> or JPA <filename>persistence.xml</filename> files. It is possible to use either an already configured Hibernate or JPA connection, or specify a new one here.
                      </para>
										</entry>
										<entry>
											<para>True</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Name</para>
										</entry>
										<entry>
											<para>The unique name of the console configuration</para>
										</entry>
										<entry>
											<para>True</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Project</para>
										</entry>
										<entry>
											<para>The name of a Java project whose classpath should be used in the console configuration</para>
										</entry>
										<entry>
											<para>True</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Properties file</para>
										</entry>
										<entry>
											<para>Path to a <filename>hibernate.properties</filename> file</para>
										</entry>
										<entry>
											<para>False</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Type</para>
										</entry>
										<entry>
											<para>
												Choose between &quot;CORE&quot;, &quot;ANNOTATIONS&quot; and &quot;JPA&quot; according to the method of relational mapping you want to use. Note, &quot;Annotations&quot; and &quot;JPA&quot; require a running Eclipse IDE with a JDK 5 runtime, or you will get class loading and/or version errors.
                      </para>
										</entry>
										<entry>
											<para>True</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="closing_conf_config">
			<title>Closing Hibernate Console Configuration</title>
			<para>
				To close <guilabel>Hibernate Console Configuration</guilabel> you need to right-click your configuration and choose the <guimenuitem>Close Configuration</guimenuitem> option.
			</para>
			<figure>
				<title>Close Hibernate Console Configuration</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/plugins_4_d.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				When closing the configuration the connection with database will be closed, JAR libs will be unlocked (for Windows) and other resources are set free.
			</para>
		</section>
	</section>
	<section id="refeng_codegen" role="updated">
		<title>Reverse Engineering and Code Generation</title>
		<para>
			Hibernate provides &quot;click-and-generate&quot; reverse engineering and code generation facilities. This allows you to generate a range of artifacts based on database or an existing Hibernate configuration, be that mapping files or annotated classes. Some of these are POJO Java source files, Hibernate <filename>.hbm.xml</filename> files, <filename>hibernate.cfg.xml</filename> generation and schema documentation.
		</para>
		<para>
			To start working with this process, start the <guilabel>Hibernate Code Generation</guilabel> tool which is available from the toolbar via the <property>Hibernate</property> icon or via the <menuchoice><guimenuitem>Run</guimenuitem><guimenuitem>Hibernate Code Generation Configurations</guimenuitem></menuchoice> menu item.
		</para>
		<section id="code_gen">
			<title>Code Generation Launcher</title>
			<para>
				When you click on the <guimenuitem>Open Hibernate Code Generation Dialog...</guimenuitem> option the standard Eclipse launcher dialog will appear. 	In this dialog you can create, edit and delete named Hibernate code generation "launchers".
			</para>
			<figure id="hib_code_gen">
				<title>Getting Hibernate Code Generation Launcher</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata fileref="images/plugins/plugins_6.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_6.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para/>
			<figure>
				<title>Hibernate Code Generation Launcher</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" scale="80" fileref="images/plugins/plugins_7.png" format="PNG" />
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_7.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				The first time you create a code generation launcher you should give it a meaningful name, otherwise the default prefix <guilabel>New_Generation</guilabel> will be used.
			</para>
			<note>
				<title>Tip:</title>
				<para>
					The &quot;At least one exporter option must be selected&quot; warning indicates that for this launcher to work you need to select an exporter on the <guilabel>Exporter</guilabel> tab. When an exporter has been selected the warning will disappear.
				</para>
			</note>
			<para>
				The dialog also has the standard <guilabel>Refresh</guilabel> and <guilabel>Common</guilabel> tabs that can be used to configure which directories should be automatically refreshed and various general settings for launchers, such as saving them in a project for sharing the launcher within a team.
			</para>
			<para>On the <guilabel>Main</guilabel> tab you see the following fields:</para>
			<table>
				<title>Code generation "Main" tab fields</title>
				<tgroup cols="2">
					<colspec colnum="1" align="left" colwidth="1*"/>
					<colspec colnum="2" colwidth="3*"/>
					<colspec colnum="3" colwidth="0.5*"/>
					<thead>
						<row>
							<entry align="center">
								<para>Field</para>
							</entry>
							<entry align="center">
								<para>Description</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<para>Console Configuration</para>
							</entry>
							<entry>
								<para>The name of the console configuration that should be used when generating code</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Output directory</para>
							</entry>
							<entry>
								<para>
									The default location where all output will be written to. It's possible to enter absolute directory path, for example - <filename>d:/temp</filename>. Be aware that existing files will be overwritten, so be sure to specify the correct directory.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Reverse engineer from JDBC Connection</para>
							</entry>
							<entry>
								<para>
									If enabled, the tools will reverse engineer the database defined in the connection information in the selected Hibernate Console Configuration, and generate code based on the database schema. If not enabled, the code generation will be based on the existing mappings specified in the Hibernate Console configuration.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>The package name here is used as the default package name for any entities found when reverse engineering</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>reveng.xml</para>
							</entry>
							<entry>
								<para>
									Path to a <filename>reveng.xml</filename> file. A <filename>reveng.xml</filename> file allows you to control certain aspects of the reverse engineering process such as how JDBC types are mapped to Hibernate types, and which tables are included and excluded from the process (which is especially important). Clicking the <guibutton>Setup</guibutton> button allows you to select an existing <filename>reveng.xml</filename> file, or create a new one. See more details about the <filename>reveng.xml</filename> file in <xref linkend="reverseengineering"/>.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>reveng. strategy</para>
							</entry>
							<entry>
								<para>
									If the <filename>reveng.xml</filename> file does not provide enough customization you can provide your own implementation of a <code>ReverseEngineeringStrategy</code>. The class needs to be in the classpath of the Console Configuration, otherwise you will get class not found exceptions. See <xref linkend="custom-reveng-strategy"/> for details and an example of a custom strategy.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Generate basic typed composite ids</para>
							</entry>
							<entry>
								<para>
									When a table has a multi-column primary key, a <code>&lt;composite-id&gt;</code> mapping will always be created. If this option is enabled and there are matching foreign-keys, each key column is still considered a 'basic' scalar (string, long, etc.) instead of a reference to an entity. If you disable this option a <code>&lt;key-many-to-one&gt;</code> property is created instead. Note: a <code>&lt;many-to-one&gt;</code> property is still created, but is simply marked as non-updatable and non-insertable.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Detect optimistic lock columns</para>
							</entry>
							<entry>
								<para>
									Automatically detect optimistic lock columns. Controllable via reveng. strategy; the current default is to use columns named VERSION or TIMESTAMP.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Detect many-to-many tables</para>
							</entry>
							<entry>
								<para>Automatically detect many-to-many tables. Controllable via reveng. strategy.</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Detect one-to-one associations</para>
							</entry>
							<entry>
								<para>
									Reverse engineering detects one-to-one associations via primary key and both the <filename>hbm.xml</filename> file and annotation generation generates the proper code for it.
								</para>
								<para> 
									The detection is enabled by default (except for Seam 1.2 and Seam 2.0) reverse engineering. For Hibernate Tools generation there is a check box to disable this feature if it is not required. 
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Use custom templates</para>
							</entry>
							<entry>
								<para>
									If enabled, the Template directory will be searched first when looking up the templates, allowing you to redefine how the individual templates process the hibernate mapping model.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Template directory</para>
							</entry>
							<entry>
								<para>A path to a directory with custom templates</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section id="exportes">
			<title>Exporters</title>
			<para>
				The <guilabel>Exporters</guilabel> tab is used to specify the type of code that should be generated. Each selection represents an Exporter that is responsible for generating the code, hence the name.
			</para>
			<figure>
				<title>Selecting Exporters</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" scale="80" fileref="images/plugins/plugins_8.png" format="PNG" />
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_8.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				The following table provides a short description of the various exporters. Remember you can add and remove any Exporters depending on your needs.
			</para>
			<table>
				<title>Code generation Exporter tab fields</title>
				<tgroup cols="2">
					<colspec colnum="1" align="left" colwidth="1*"/>
					<colspec colnum="2" colwidth="3*"/>
					<thead>
						<row>
							<entry align="center">
								<para>Field</para>
							</entry>
							<entry align="center">
								<para>Description</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<para>Domain code</para>
							</entry>
							<entry>
								<para>Generates POJO's for all the persistent classes and components found in the given Hibernate configuration.</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>DAO code</para>
							</entry>
							<entry>
								<para>Generates a set of DAO's for each entity found.</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Hibernate XML Mappings</para>
							</entry>
							<entry>
								<para>Generate mapping (<filename>hbm.xml</filename>) files for each entity.</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Hibernate XML Configuration</para>
							</entry>
							<entry>
								<para>
									Generate a <filename>hibernate.cfg.xml</filename> file. Used to keep the <filename>hibernate.cfg.xml</filename> file updated with any newly discovered mapping files.
								</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Schema Documentation (.html)</para>
							</entry>
							<entry>
								<para>Generates a set of HTML pages that documents the database schema and some of the mappings.</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Generic Exporter (hbmtemplate)</para>
							</entry>
							<entry>
								<para>Fully customizable exporter that can be used to perform custom generation.</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>Schema Export (.ddl)</para>
							</entry>
							<entry>
								<para>Generates the appropriate SQL DDL and allows you to store the result in a file or export it directly to the database.</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<para>
				Each Exporter uses certain properties which can be set up in the <guilabel>Properties</guilabel> section where you can add and remove predefined or custom properties for each of the exporters. The following table lists the predefined properties:
			</para>
			<para>
				<table>
					<title>Exporter Properties</title>
					<tgroup cols="2">
						<colspec colnum="1" align="left" colwidth="1*"/>
						<colspec colnum="2" colwidth="3*"/>
						<thead>
							<row>
								<entry align="center">
									<para>Name</para>
								</entry>
								<entry align="center">
									<para>Description</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>jdk5</para>
								</entry>
								<entry>
									<para>Generate Java 5 syntax</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>ejb3</para>
								</entry>
								<entry>
									<para>Generate EJB 3 annotations</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>for_each</para>
								</entry>
								<entry>
									<para>
										Specifies for which type of model elements the exporter should create a file and run through the templates. Possible values are: entity, component, configuration
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>template_path</para>
								</entry>
								<entry>
									<para>Custom template directory for this specific exporter. You can use Eclipse variables.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>template_name</para>
								</entry>
								<entry>
									<para>Name for template relative to the template path</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>outputdir</para>
								</entry>
								<entry>
									<para>Custom output directory for this specific exporter. You can use Eclipse variables.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>file_pattern</para>
								</entry>
								<entry>
									<para>
										Pattern to use for the generated files, with a path relative to the output dir. Example: <filename>{package-name}/{class-name}.java</filename>.
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>dot.executable</para>
								</entry>
								<entry>
									<para>Executable to run GraphViz (only relevant, but optional for Schema documentation)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>drop</para>
								</entry>
								<entry>
									<para>Output will contain drop statements for the tables, indices and constraints</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>delimiter</para>
								</entry>
								<entry>
									<para>The delimiter used in the output file</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>create</para>
								</entry>
								<entry>
									<para>Output will contain create statements for the tables, indices and constraints</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>scriptToConsole</para>
								</entry>
								<entry>
									<para>The script will be output to Console</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>exportToDatabase</para>
								</entry>
								<entry>
									<para>Executes the generated statements against the database</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>outputFileName</para>
								</entry>
								<entry>
									<para>If specified the statements will be dumped to this file</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>haltOnError</para>
								</entry>
								<entry>
									<para>Halts the build process if an error occurs</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>format</para>
								</entry>
								<entry>
									<para>Applies basic formatting to the statements</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>schemaUpdate</para>
								</entry>
								<entry>
									<para>Updates a schema</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			<para>
				To add a property to the chosen Exporter click the <guibutton>Add</guibutton> button in the <guilabel>Properties</guilabel> section. In the resulting dialog you should select the property from the proposed list and the value for it.
			</para>
			<figure>
				<title>Adding the Property for Schema Export (.ddl)</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/plugins_8a.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<note>
				<title>Tip:</title>
				<para>If the property is a directory, it is possible to browse directories in the <guilabel>Value</guilabel> field.</para>
			</note>
			<figure>
				<title>Specifying the Property Value</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/plugins_8b.png"/>
					</imageobject>
				</mediaobject>
			</figure>
		</section>
	</section>
	<section id="map_config_editor">
		<title>Hibernate Mapping and Configuration File Editor</title>
		<para>
			The <property>Hibernate Mapping File editor</property> provides XML editing functionality for the <filename>hbm.xml</filename> and <filename>cfg.xml</filename> files. The editor is based on the Eclipse WTP tools and extends its functionality to provide Hibernate specific code completion.
		</para>
		<figure>
			<title>XML Editing Functionality</title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata align="center" scale="80" fileref="images/plugins/plugins_9.png" format="PNG"/>
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/plugins/plugins_9.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		<section>
			<title>Java property/class completion</title>
			<para>
				Package, class, and field completion is enabled for relevant XML attributes. The auto-completion tool detects its context and limits the completion for a tag (such as <code>&lt;property&gt;</code>) and only shows the properties and fields available in the enclosing <code>&lt;class&gt;</code>, <code>&lt;subclass&gt;</code> etc. It is also possible to navigate from the <filename>hbm.xml</filename> files to the relevant classes and fields in your Java code.
			</para>
			<figure>
				<title>Navigation Functionality</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" fileref="images/plugins/plugins_10.png" format="PNG" scale="80"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_10.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				This is done via the standard hyperlink navigation functionality in Eclipse. By default this is done by pressing <keycap>F3</keycap> while the cursor is on a class or field, or by pressing <keycap>Ctrl</keycap> and the mouse button.
			</para>
			<para>For Java completion and navigation to work the file needs to reside inside an Eclipse Java project, otherwise the feature is not available.</para>
			<note>
				<title>Note:</title>
				<para>Java completion does not require a Hibernate console configuration to be used.</para>
			</note>
		</section>
		<section>
			<title>Table/Column completion</title>
			<para>Table and column completion is also available for all table and column attributes. </para>
			<figure>
				<title>Table and Column Completion</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" scale="80" fileref="images/plugins/plugins_11.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_11.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<important>
				<title>Important:</title>
				<para>
					Table and Column completion requires a properly configured Hibernate console configuration, and this configuration should be the default for the project where the <filename>hbm.xml</filename> resides.
				</para>
			</important>
			<para>
				You can check which console configuration is selected in the Properties of a project under the <guilabel>Hibernate Settings</guilabel> page. When a proper configuration is selected it will be used to fetch the table and column names in the background.
			</para>
			<note>
				<title>Note:</title>
				<para>
					Currently it is not recommended to use this feature on large databases since it does not fetch the information iteratively. This will be improved in future versions.
				</para>
			</note>
		</section>
		<section>
			<title>Configuration property completion</title>
			<para>
				Code completion for the value of <code>&lt;property&gt; name</code> attributes is available when editing the <filename>cfg.xml</filename> file.
			</para>
			<figure>
				<title>Property Completion</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" scale="80" fileref="images/plugins/plugins_12.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_12.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</section>
	</section>
	<section id="map_config_struct_editor">
		<title>Structured Hibernate Mapping and Configuration File Editor</title>
		<para>
			The structured editor represents a file in a tree form. It also provides a way to modify the structure of the file and its elements with the help of tables provided on the right-hand area.
		</para>
		<para>
			To open any mapping file in the editor, select <menuchoice><guimenuitem>Open With</guimenuitem><guimenuitem>Hibernate 3.0 XML Editor</guimenuitem></menuchoice> from the context menu of the file. The editor is shown in the following image:
    </para>
		<figure>
			<title>Structured hbm.xml Editor</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/plugins_12_a.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			For the configuration file you should select <menuchoice><guimenuitem>Open With</guimenuitem><guimenuitem>Hibernate Configuration 3.0 XML Editor</guimenuitem></menuchoice>.
		</para>
		<figure>
			<title>Structured cfg.xml Editor</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/plugins_12_b.png"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	<section id="properties_editor">
		<title>JBoss Tools Properties Editor</title>
		<para>
			The editor is designed to edit <filename>.properties</filename> files. It contains two tabs: the <guilabel>Properties</guilabel> (UI) tab and the <guilabel>Source</guilabel> tab for manual editing.
		</para>
		<para>
			For <filename>hibernate.properties</filename> files the <guilabel>JBoss Tools Properties Editor</guilabel> provides content assist for both Hibernate properties and values. You can make use of the content assist while editing the file in the <guilabel>Source</guilabel> view and in the <guilabel>Properties</guilabel> view of the editor.
		</para>
		<para>To add the property in the <guilabel>Properties</guilabel> view, click the <guibutton>Add</guibutton> button.</para>
		<figure>
			<title>Adding the Property</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/add_property1.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			In the <guilabel>Name</guilabel> field press <keycombo><keycap>Ctrl</keycap><keycap>Space</keycap></keycombo> to invoke the content assist. It will suggest <code>&apos;hibernate.&apos;</code> which is the prefix for all hibernate properties. After selecting <code>&apos;hibernate.&apos;</code> and invoking the content assist again, other prefixes and properties are displayed as the proposals, with a description for each one.
		</para>
		<figure>
			<title>Content Assist for Properties Names</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/add_property2.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>When invoking the content assist in the <guilabel>Value</guilabel> field, it also provides a list of proposals.</para>
		<figure>
			<title>Content Assist for Properties Values</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/add_property3.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>In the <guilabel>Source</guilabel> view of the editor, content assist can also be invoked both for properties names and values:</para>
		<figure>
			<title>Content Assist in the Source view</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/add_property4.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<figure>
			<title>Content Assist in the Source view</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/add_property5.png"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	<section id="rev_xml_editor">
		<title>Reveng.xml Editor</title>
		<para>
			A <filename>reveng.xml </filename> file is used to customize and control how reverse engineering is performed by the tools. The plugins provide an editor to assist in editing this file.
		</para>
		<para>
			The editor is intended to allow easy definition of type mappings, table include and excludes, and specific override settings for columns, e.g. define an explicit name for a column when the default naming rules are not applicable.
		</para>
		<note>
			<title>Note:</title>
			<para>
				Not all the features of the <filename>.reveng.xml</filename> file are exposed or fully implemented in the editor, but the main functionality is there. To understand the full flexibility of the <filename>reveng.xml</filename> file, please see <xref linkend="hibernaterevengxmlfile"/>
			</para>
		</note>
		<para>
			The editor is activated as soon as a <filename>.reveng.xml </filename> file is opened. To create an initial <filename>reveng.xml </filename> file the <guilabel>Reverse Engineering File Wizard</guilabel> can be started by pressing <keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo> and then selecting <menuchoice><guimenuitem>Hibernate</guimenuitem><guimenuitem>Hibernate Reverse Engineering File (reveng.xml)</guimenuitem></menuchoice>.
		</para>
		<figure>
			<title>ChooseReverse Engineering File Wizard </title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata align="center" scale="80" fileref="images/plugins/plugins_22.png" format="PNG" />
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/plugins/plugins_22.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			Or you can get it via the <guilabel>Code Generation Launcher</guilabel> by checking the appropriate section in the <guilabel>Main</guilabel> tab of the <guilabel>Hibernate Code Generation Configurations</guilabel> wizard (see <xref linkend="hib_code_gen"/>).
    </para>
		<para>
			The following screenshot shows the <guilabel>Overview</guilabel> page where the appropriate console configuration is selected (it is auto-detected if Hibernate 3 support is enabled for the project).
		</para>
		<figure>
			<title>Overview Page</title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata align="center" scale="80" fileref="images/plugins/plugins_13.png" format="PNG" />
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/plugins/plugins_13.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			The <guilabel>Table Filter</guilabel> page allows you to specify which tables to include and exclude. Clicking the <guibutton>Refresh</guibutton> button shows the tables from the database that have not yet been excluded.
		</para>
		<figure>
			<title>Table Filters Page</title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata align="center" scale="80" fileref="images/plugins/plugins_14.png" format="PNG" />
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/plugins/plugins_14.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			The <guilabel>Type Mappings</guilabel> page is used to specify type mappings from JBDC types to any Hibernate type (including user types) if the default rules are not applicable. To see the database tables press the <guibutton>Refresh</guibutton> button underneath. For more information on type mappings please see the <xref linkend="type_map"/> section.
		</para>
		<figure>
			<title>Type Mappings Page</title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata align="center" scale="80" fileref="images/plugins/plugins_15.png" format="PNG" />
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/plugins/plugins_15.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			The <guilabel>Table and Columns</guilabel> page allows you to explicitly set which details (e.g. which hibernate type and property name) should be used in the reverse engineered model. For more details on how to configure the tables while reverse engineering read <xref linkend="tab_and_col"/>.
		</para>
		<figure>
			<title>Table and Columns Page</title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata align="center" scale="80" fileref="images/plugins/plugins_16.png" format="PNG" />
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/plugins/plugins_16.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	<section id="hib_console">
		<title>Hibernate Console Perspective</title>
		<para>
			The <guilabel>Hibernate Console Perspective</guilabel> combines a set of views which allow you to see the structure of your mapped entities and classes, edit HQL queries, execute the queries, and view the results. To use this perspective you need to create a <guilabel>Hibernate Console Configuration</guilabel> (see <xref linkend="console_conf"/> for more information).
		</para>
		<section>
			<title>Viewing the entity structure</title>
			<para>
				To view your new configuration and entity or class structure, switch to the <guilabel>Hibernate Configurations View</guilabel>. Expanding the tree allows you to browse the class or entity structure, as well as view the relationships.
			</para>
			<figure>
				<title>Hibernate Console Perspective</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" scale="80" fileref="images/plugins/plugins_17.png"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_17.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				The <guilabel>Console Configuration</guilabel> does not dynamically adjust to changes performed in mappings and Java code. To reload the configuration select the configuration and click the <guibutton>Reload</guibutton> button in the view toolbar or in the context menu.
			</para>
			<para>
				It is possible to open source and mapping files for objects shown in the <guilabel>Hibernate Configurations View</guilabel>. Just bring up the context menu for an object and select <guimenuitem>Open Source File</guimenuitem> to see the appropriate Java class or <guimenuitem>Open Mapping File</guimenuitem> to open a <filename>.hbm.xml</filename> file.
			</para>
			<figure>
				<title>Opening Source for Objects</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/plugins_17_a.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<section id="map_diagram">
				<title>Mapping Diagram</title>
				<para>
					In order to visualize how entities are related, as well as view their structures, a <guilabel>Mapping Diagram</guilabel> is provided. Right click an entity and select <guilabel>Mapping Diagram</guilabel> to view its mapping diagram.
				</para>
				<figure>
					<title>Mapping Diagram</title>
					<mediaobject>
						<imageobject role="fo">
							<imagedata align="center" scale="80" fileref="images/plugins/plugins_18.png"/>
						</imageobject>
						<imageobject role="html">
							<imagedata align="center" fileref="images/plugins/plugins_18.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>
					To make <guilabel>Mapping Diagram</guilabel> usage easier you can use the <guilabel>Rules</guilabel>, <guilabel>Grid</guilabel>, <guilabel>Snap to Geometry</guilabel> check boxes in the <guimenu>View</guimenu> menu. 
				</para>
				<figure>
					<title>View menu</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/map_diagram1.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>
					If you select the <guilabel>Rulers</guilabel> check box, the view print page scale will be added to the page. The numbers on the scale displays its size in inches. If you click on the scale a <guilabel>Ruler Guide</guilabel> will appear on the diagram. You can connect any diagram item to it. To connect the items you should move their tops to the Ruler Guide. And while moving the ruler guide, the items will be moved together with it as a whole.
        </para>
				<figure>
					<title>Moving the Ruler guide</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/map_diagram2.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>If you select the <guilabel>Grid</guilabel> check box, a grid will appear on the diagram.</para>
				<figure>
					<title>Grid on Mapping diagram</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/map_diagram3.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>The <guilabel>Snap to Geometry</guilabel> check box allows you to align the diagram items with the grid.</para>
				<para>
					For better navigating through the diagram use the <guilabel>Outline view</guilabel>, which is available in the structural and graphical modes.
				</para>
				<figure>
					<title>Navigating in the Structural Mode</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/plugins_18_a.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>To switch between the view modes, use the buttons in the top-right corner of the <guilabel>Outline view</guilabel>.</para>
				<figure>
					<title>Navigating in the Graphical Mode</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/plugins_18_b.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>The options in the context menu of the mapping diagram are listed in the next table.</para>
				<table>
					<title>Context Menu Options of the Mapping Diagram</title>
					<tgroup cols="3">
						<colspec colnum="1" align="left" colwidth="1*"/>
						<colspec colnum="2" align="left" colwidth="1*"/>
						<colspec colnum="3" align="left" colwidth="3*"/>
						<thead>
							<row>
								<entry align="center">
									<para>Icon</para>
								</entry>
								<entry align="center">
									<para>Command</para>
								</entry>
								<entry align="center">
									<para>Description</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/toggleConnections.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Show|Hide connections</para>
								</entry>
								<entry>Allows you to select what types of connections should be shown on the diagram: <itemizedlist>
                    <listitem>
                      <para>Property Mappings</para>
										</listitem>
										<listitem>
											<para>Class Mappings</para>
										</listitem>
										<listitem>
											<para>Associations</para>
										</listitem>
										<listitem>
											<para>Foreign key constraints</para>
										</listitem>
									</itemizedlist>
								</entry>
							</row>
							<row>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>Select All</para>
								</entry>
								<entry>
									<para>Selects all the diagram elements</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/autoLayout.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Auto layout</para>
								</entry>
								<entry>
									<para>Used to arrange of all the items in the diagram in a standard manner</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/exportAsImage.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Export as Image</para>
								</entry>
								<entry>
									<para>
										Allows the diagram to be exported as a <filename>PNG</filename>,<filename>JPEG</filename> or <filename>BMP</filename> file
									</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>When you open the context menu for an item in the diagram, it differs quite significantly from the one described before.</para>
				<figure>
					<title>Context Menu in Mapping Item</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/plugins_18_g.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>The next table describes the additional options found in the mapping items context menu:</para>
				<table>
					<title>Extra Options in the Context Menu of Mapping Item</title>
					<tgroup cols="3">
						<colspec colnum="1" align="left" colwidth="1*"/>
						<colspec colnum="2" align="left" colwidth="1*"/>
						<colspec colnum="3" align="left" colwidth="3*"/>
						<thead>
							<row>
								<entry align="center">
									<para>Icon</para>
								</entry>
								<entry align="center">
									<para>Command</para>
								</entry>
								<entry align="center">
									<para>Description</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/openSourceFile_but.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Open Source File</para>
								</entry>
								<entry>
									<para>
										Opens the source file for a chosen object or element. The selected element will be highlighted in the open file.
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/openMappingFile_but.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Open Mapping File</para>
								</entry>
								<entry>
									<para>
										Opens a mapping file for a chosen object or element. The selected element will be highlighted in the open file.
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/visibleState.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Show|Hide shape(s)</para>
								</entry>
								<entry>
									<para>Used to hide or show an item on the mapping diagram</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/expandState.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Expand|Collapse shape(s)</para>
								</entry>
								<entry>
									<para>Used to expand and collapse fields displayed by the item</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<note>
					<title>Tip:</title>
					<para>All these context menu options are also available in the <guilabel>Outline</guilabel> view.</para>
				</note>
				<para>The following table lists the available keyboard shortcuts.</para>
				<table>
					<title>Hibernate Mapping Diagram Shortcut Keys</title>
					<tgroup cols="2">
						<colspec colnum="1" align="left" colwidth="3*"/>
						<colspec colnum="2" align="left" colwidth="1*"/>
						<thead>
							<row>
								<entry align="center">
									<para>Command</para>
								</entry>
								<entry align="center">
									<para>Binding</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>Scroll the diagram content</para>
								</entry>
								<entry>
									<para>
										<keycombo>
											<keycap>Ctrl</keycap>
											<keycap>Shift</keycap>
											<keycap>arrows</keycap>
										</keycombo>
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>Collapse or Expand selected item(s)</para>
								</entry>
								<entry>
									<para>
										<keycap>Enter</keycap>
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>Show or Hide selected item(s)</para>
								</entry>
								<entry>
									<para>
										<keycap>+</keycap>
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>Sort items in alphabetical order or return to the initial state</para>
								</entry>
								<entry>
									<para>
										<keycap>Space</keycap>
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>Navigate between the items</para>
								</entry>
								<entry>
									<para>
										<keycap>Arrows</keycap>
									</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>
					It is possible to save the diagram in the Eclipse work space. Select <menuchoice><guimenuitem>File</guimenuitem><guimenuitem>Save As</guimenuitem></menuchoice>, and the wizard will ask you to specify the location within you project where you wish to save the file, and provide the name for the diagram. The default name is the item&apos;s names concatenated with the ampersand symbols. The file is saved with the <filename>.hibernate</filename> extension.
				</para>
				<figure>
					<title>The Diagram saved in the Work space</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/saveDiagram.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<note>
					<title>Note:</title>
					<para>
						If you restart Eclipse with the mapping diagram opened, the mapping diagram is restored and displays a message, as seen in the next screenshot. To view the diagram content, you should refresh the view.
           </para>
				</note>
				<figure>
					<title>The Diagram after Restarting the Eclipse</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/diagram1.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<figure>
					<title>The Diagram after Refreshing</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/diagram2.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>There are some useful commands in the toolbar.</para>
				<figure>
					<title>The Diagram View Toolbar</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/diagramToolbar.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>They are described in the table below.</para>
				<table>
					<title>Command in Diagram View Toolbar </title>
					<tgroup cols="3">
						<colspec colnum="1" align="left" colwidth="1*"/>
						<colspec colnum="2" align="left" colwidth="1*"/>
						<colspec colnum="3" align="left" colwidth="3*"/>
						<thead>
							<row>
								<entry align="center">
									<para>Icon</para>
								</entry>
								<entry align="center">
									<para>Command</para>
								</entry>
								<entry align="center">
									<para>Description</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/toolbarRefresh.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Refresh Visual Mapping</para>
								</entry>
								<entry>
									<para>Updates the <guilabel>Mapping Diagram</guilabel> if the <guilabel>Console Configuration</guilabel> was changed. </para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/toolbarZoom.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Zoom Box</para>
								</entry>
								<entry>
									<para>
										Used to define scale of the diagram. It is also used for printing <guilabel>Mapping Diagrams</guilabel>. If you want to print the whole <guilabel>diagram</guilabel> to one page, you need select the <guilabel>Page</guilabel> option in the <guilabel>Zoom Box</guilabel> drop down list.
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/toolbarAutolayout.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Auto layout</para>
								</entry>
								<entry>
									<para>Used to arrange all diagram items in a standard manner.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/toolbarShowHideConnections.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Show|Hide connections</para>
								</entry>
								<entry>
									<para>
										Used to show or hide a connection on the diagram. You can also choose what type of connections must be present on the diagram (<guilabel>Property Mappings</guilabel>, <guilabel>Class Mappings</guilabel>, <guilabel>Associations</guilabel> or <guilabel>Foreign key constraints</guilabel>).
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/toolbarExpandCollapse.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para>Expand|Collapse</para>
								</entry>
								<entry>
									<para>Used for expanding or collapsing fields of the item.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/plugins/toolbarShowHideShapes.png"/>
											</imageobject>
										</inlinemediaobject>
									</para>
								</entry>
								<entry>
									<para> Show|Hide shape(s)</para>
								</entry>
								<entry>
									<para>Used to hide or show an item on the mapping diagram.</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
		</section>
		<section>
			<title>Prototyping Queries</title>
			<para>
				Queries can be prototyped by entering them into the <guilabel>HQL</guilabel> or <guilabel>Criteria Editor</guilabel>. To execute a query click the green run button in the editor toolbar, or press <keycombo><keycap>Ctrl</keycap><keycap>Enter</keycap></keycombo>.
			</para>
			<section id="hql_and_criteria_editors">
				<title>HQL Editor and Hibernate Criteria Editor</title>
				<para>
					To open the query editors right-click your projects <guilabel>Console Configuration</guilabel> and select <guimenuitem>HQL Editor</guimenuitem> (or <guimenuitem>Hibernate Criteria Editor</guimenuitem>).
				</para>
				<figure>
					<title>Opening HQL Editor</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/prototypingQueries.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<note>
					<title>Tip:</title>
					<para>
						If the context menu items are disabled, you need to first create a <guilabel>Session Factory</guilabel>. That is done by expanding the <guilabel>Session Factory</guilabel> node.
					</para>
				</note>
				<para>When they are opened, the editors automatically detect the chosen <guilabel>Console Configuration</guilabel>.</para>
				<para>
					To generate a predefined query for any entity (or any entity child node) listed in the <guilabel>Session Factory</guilabel> you should double-click it. This will open the <guilabel>HQL Editor</guilabel> with the associated query.
				</para>
				<para>
					Choosing <guimenuitem>HQL Editor</guimenuitem> in the context menu for any entity (or any entity child node) will also open the HQL Editor with the associated query. If you select <guimenuitem>Hibernate Criteria Editor</guimenuitem> in the context menu, it runs the <guilabel>Hibernate Criteria Editor</guilabel> with the associated criteria.
				</para>
				<figure>
					<title>Generating Simple Queries</title>
					<mediaobject>
						<imageobject role="fo">
							<imagedata align="center" scale="80" fileref="images/plugins/plugins_19.png" format="PNG"/>
						</imageobject>
						<imageobject role="html">
							<imagedata align="center" fileref="images/plugins/plugins_19.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>
					It is also possible to copy a portion of code from a <filename>.java</filename> file into the <guilabel>HQL</guilabel> or <guilabel>Criteria editor</guilabel>. To do this make use of the Quick Fix option (<keycombo><keycap>Ctrl</keycap><keycap>1</keycap></keycombo>).
				</para>
				<figure>
					<title>Quick Fix Option Demonstration</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/plugins_19_b.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>
					You can also update the original Java code with changes made in the HQL or Criteria editor. For that you should save your HQL/Criteria query and submit the replacement code when prompted by the confirmation dialog.
				</para>
				<figure>
					<title>Updating Java Code</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/plugins_19_c.png"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>
					In addition, you can pin the <guilabel>HQL editor</guilabel> and <guilabel>Criteria editor</guilabel> as a tab in the <guilabel>Hibernate Query Result</guilabel> view. For that you need to click on the <guibutton>Stick result to one tab</guibutton> button (<inlinemediaobject><imageobject><imagedata fileref="images/plugins/sticky_but.png"/></imageobject></inlinemediaobject>). In this state query executions results will be shown in one tab (no more will be opened). 
				</para>
				<para>
					You are able to rename the <guilabel>Hibernate Query Result</guilabel> tab. Click the tab, and type a new name in the <menuchoice><guimenuitem>Property View</guimenuitem><guimenuitem>Tab name</guimenuitem></menuchoice> field. 
				</para>
				<figure>
					<title>Tab Renaming</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/plugins/plugins_19_d.png"/>
						</imageobject>
					</mediaobject>
				</figure>
			</section>
			<section>
				<title>Error Handling</title>
				<para>
					Errors raised during the creation of the <guilabel>Session Factory</guilabel>, or when executing the queries (e.g. if your configuration or query is incorrect), will be shown in a message dialog or displayed in-line in the view that detected the error. You may get more information about the error in the <guilabel>Error Log</guilabel> view on the right pane.
				</para>
				<para>
					Results of a query will be shown in the <guilabel>Hibernate Query Result</guilabel> view and details of possible errors (syntax errors, database errors, etc.) can be seen in the <guilabel>Error Log</guilabel> view.
				</para>
				<note>
					<title>Note:</title>
					<para>
						HQL queries are executed by default using the <code>list()</code> function, and without any row limit could return a large result set. You may run out of memory. To avoid this you can enter a value in the <guilabel>Max</guilabel> results field to reduce the number of elements that are returned.
           </para>
				</note>
			</section>
			<section>
				<title>Hibernate Dynamic Query Translator</title>
				<para>
					If the <guilabel>Hibernate Dynamic Query Translator</guilabel> view is visible, it will show the generated SQL for a HQL query while you write in the <guilabel>HQL Editor</guilabel> .
				</para>
				<figure>
					<title>Hibernate Dynamic Query Translator View</title>
					<mediaobject>
						<imageobject role="fo">
							<imagedata align="center" scale="80" fileref="images/plugins/plugins_20.png" format="PNG"/>
						</imageobject>
						<imageobject role="html">
							<imagedata align="center" fileref="images/plugins/plugins_20.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</figure>
				<para>
					The translation is performed each time you stop typing in the editor. If there are errors in the HQL code the parse exception will be shown embedded in the view.
				</para>
			</section>
		</section>
		<section>
			<title>Properties View</title>
			<para>
				As you can see in the figure below, when clicking on class or entity the <guilabel>Properties</guilabel> view shows the number of query results as well as the execution time.
			</para>
			<figure>
				<title>Properties View</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" scale="80" fileref="images/plugins/plugins_21_a.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_21_a.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				It also displays the structure of any persistent object selected in the <guilabel>Hibernate Query Results View</guilabel>. Editing is not yet supported.
			</para>
			<figure>
				<title>Properties View for Selected Object</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata align="center" scale="80" fileref="images/plugins/plugins_21_b.png" format="PNG"/>
					</imageobject>
					<imageobject role="html">
						<imagedata align="center" fileref="images/plugins/plugins_21_b.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				You can also use <guilabel>Properties</guilabel> view when clicking on the configuration itself in <guilabel>Hibernate Configuration</guilabel> view (see <xref linkend="modif_console_conf"/>).
			</para>
		</section>
	</section>
	<section id="jpa_annotations">
		<title>Hibernate:add JPA annotations refactoring </title>
		<para>Using this wizard you can add the following Hibernate annotations to a class: <code>@Column</code>, <code>@Entity</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>, <code>@OneToOne</code>, <code>@ManyToMany</code>, <code>@MappedSuperclass</code>, <code>@Id</code>, <code>@GeneratedValue</code>, <code>@Version </code>
		</para>
		<itemizedlist>
			<listitem>
				<para><code>@Column</code> is added to all String properties.</para>
			</listitem>
			<listitem>
				<para>
					<code>@Entity</code> is always declared before any class where it has not yet been defined.</para>
			</listitem>
			<listitem>
				<para>
					<code>@ManyToOne</code>, <code>@OneToMany</code>, <code>@OneToOne</code>, <code>@ManyToMany</code> - these annotations are declared according to the classes hierarchy.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>@MappedSuperclass</code> is added to abstract super-classes.</para>
			</listitem>
			<listitem>
				<para>
					<code>@Id</code>, <code>@GeneratedValue</code> are only added automatically to the properties under the name "Id", where they have not yet been defined.
        </para>
			</listitem>
			<listitem>
				<para>
					<code>@Version</code> is declared in case you select optimistic locking (see <xref linkend="optim_lock"/>).</para>
			</listitem>
		</itemizedlist>
		<note>
			<title>Note:</title>
			<para>
				This section doesn't cover the definitions of the <property>Hibernate annotations</property>. For more information read the <ulink url="http://docs.jboss.org/hibernate/stable/annotations/reference/en/html/">Hibernate Annotations Documentation</ulink>.
			</para>
		</note>
		<para>
			To open this wizard, right click on the class you want to add the annotations to and select <menuchoice><guimenuitem>Source</guimenuitem><guimenuitem>Generate Hibernate/JPA annotations</guimenuitem></menuchoice> from the context menu. You will see the <guilabel>Hibernate: add JPA annotations</guilabel> dialog.
		</para>
		<figure>
			<title>Starting Hibernate:add JPA annotations dialog</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/annotations1.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			The top section of this dialog lists all the classes that will be passed through refactoring. Next to the class you have selected, this list also displays its super-classes and the classes that the objects present in the current class as properties. If you want to add new classes or packages to the list, you should click the <guibutton>Back</guibutton> button. This will display the <guilabel>Add classes and packages</guilabel> page.
		</para>
		<figure>
			<title>Add classes and packages page </title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/annotations1_a.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			Here you can add additional classes or entire packages, and you can limit the dependencies depth by selecting the <guilabel>depth control</guilabel> option (you can find more information on this option in <xref linkend="depth_control"/>). When you are finished click the <guibutton>Next</guibutton> button and you will be returned to <guilabel>The following classes will be changed</guilabel> page.</para>
		<para>
			By default the tags are added to the fields of selected classes. You can change this option to <guilabel>Getters</guilabel> in the <guilabel>Preferred location of Annotations</guilabel> drop down list, which results in the annotations being added to the getter methods. If you choose <guilabel>Auto select from class preference</guilabel> then the annotations are added according to the position of the majority of the existing annotations. 
		</para>
		<para>
			If it is necessary to map your <code>String</code> properties to the columns whose lengths differ from the default value (255), change the <guilabel>Default string length</guilabel> field and the <code>@Column(length = your length)</code> annotation will be created for every <code>String</code> property.
		</para>
		<para id="optim_lock">
			You can add optimistic locking capabilities to an entity bean by selecting the <guilabel>Enable optimistic locking</guilabel> check box. This operation will add the version property to all the selected classes. The property will be also annotated with <code>@Version</code>, and a getter and setter will be created. If the property already exists, it won't be created, but the getters and setters will be generated. If there is already <code>@MappedSuperclass</code> annotation with <code>@Version</code> in the base class of the current class, <code>@Version</code> is not inserted into the current class.
    </para>
		<para>After defining all the required settings click the <guibutton>Next</guibutton> button.</para>
		<figure>
			<title>Hibernate:add JPA annotations view</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/annotations2.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			The view includes two windows: one with the current source code and and the second with refactored source code. With the help of the <inlinemediaobject><imageobject><imagedata fileref="images/plugins/butt1.png"/></imageobject></inlinemediaobject>, <inlinemediaobject><imageobject><imagedata fileref="images/plugins/butt2.png"/></imageobject></inlinemediaobject>, <inlinemediaobject><imageobject><imagedata fileref="images/plugins/butt3.png"/></imageobject></inlinemediaobject>, <inlinemediaobject><imageobject><imagedata fileref="images/plugins/butt4.png"/></imageobject></inlinemediaobject> buttons you can quickly navigate between the differences in the code. If you don't agree with some changes you can't undo them but you can remove the class from the list of classes that need refactoring.
		</para>
		<figure>
			<title>List of classes that need refactoring</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/plugins/annotations3.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>To apply the changes click the <guibutton>Finish</guibutton> button.</para>
	</section>
	<section id="debug_log">
		<title>Enable debug logging in the plugins</title>
		<para>
			It is possible to configure the Eclipse plugin to route all logging performed by the plugins and the Hibernate code itself to the <guilabel>Error Log</guilabel> view in Eclipse.
		</para>
		<para>
			The <guilabel>Error Log</guilabel> view is used to solve problems which appear in the Hibernate Tools plugins. You can use it to troubleshoot issues while setting up a <guilabel>Hibernate Console Configuration</guilabel>.
		</para>
		<para>
			This is done by editing the <filename>hibernate-log4j.properties</filename> file in the <filename>org.hibernate.eclipse/</filename> directory or JAR. This file includes a default configuration that only logs WARN and above to a set of custom appenders (PluginFileAppender and PluginLogAppender). You can change these settings to be as verbose or silent as you please. See the <ulink url="http://www.hibernate.org/5.html">Hibernate Documentation</ulink> for more information on logging categories and Log4j documentation.
		</para>
		<section>
			<title>Relevant Resources Links</title>
			<para>
				More information on how to  to configure logging via a Log4j property file can be found in the <ulink url="http://logging.apache.org/">Apache Log4j documentation</ulink>.
			</para>
		</section>
	</section>
	<section id="dali_integration">
		<title>Hibernate support for Dali plugins in Eclipse WTP</title>
		<para>
			Starting from version 3.0.0 Alpha1, <productname>JBoss Tools</productname> Hibernate plugins support Eclipse Dali integration, which makes it possible to use Hibernate as a complete JPA development platform.
		</para>
		<section id="jpa_project_with_hibernate">
			<title>Creating JPA project with Hibernate support</title>
			<para>
				When starting a new JPA project by selecting <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>Other</guimenuitem><guimenuitem>JPA</guimenuitem><guimenuitem>JPA Project</guimenuitem></menuchoice> (or simply <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>JPA Project</guimenuitem></menuchoice> in the <guilabel>JPA Perspective</guilabel>), the first wizard page is shown in the image below.
			</para>
			<figure>
				<title>Starting JPA Project</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/dali_integration1.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>You can select a target runtime and change the project configuration, or you can leave everything as it is.</para>
			<para>
				On the JPA Facet page you should choose <guilabel>Hibernate</guilabel> as a target platform. Also select the proper database connection, if it is defined, or add a new one by clicking the <guilabel>Add connection</guilabel> link.
			</para>
			<para>Clicking the <guibutton>Finish</guibutton> button will generate the project.</para>
			<figure>
				<title>Hibernate Target Platform</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/dali_integration2.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<note>
				<title>Note:</title>
				<para>
					If you choose Hibernate as a platform while creating a JPA/Dali project, a Hibernate Console Configuration for the project is created automatically when the wizard is finished. It allows all the <guilabel>Hibernate Tools</guilabel> features to be used without any additional setup.
				</para>
			</note>
		</section>
		<section id="generate_ddl_entities_with_hibernate">
			<title>Generating DDL and Entities</title>
			<para>
				By enabling Hibernate platform specific features you can now generate DDL and Entities. To do that select the <menuchoice><guimenuitem>JPA Tools</guimenuitem><guimenuitem>Generate Tables from Entities/Generate Entities from Tables</guimenuitem></menuchoice> options in the context menu of your JPA project.
			</para>
			<figure>
				<title>Generate DDL/Entities</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/dali_integration3.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<note>
				<title>Note:</title>
				<para>Remember to specify the appropriate database driver to the classpath of your project.</para>
			</note>
			<para>The <guilabel>Generate Entities wizard</guilabel> will first ask you to choose the directory where all output will be written.</para>
			<figure>
				<title>Generate Entities Wizard</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/dali_integration4.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>To generate entities you can use:</para>
			<itemizedlist>
				<listitem>
					<para>A Hibernate Console Configuration (proposed by default)</para>
					<para>
						To select this option make sure that the <guilabel>Use Console Configuration</guilabel> check box is selected and select a configuration from the <guilabel>Console configurations</guilabel> list box.
					</para>
					<figure>
						<title>Generate Entities Wizard</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/dali_integration5.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>Or a DTP connection directly</para>
					<para>To select this option uncheck the <guilabel>Use Console Configuration</guilabel> option and adjust the database settings.</para>
				</listitem>
			</itemizedlist>
			<para>
				The options you define in the <guilabel>Generate Entities Wizard</guilabel> can also be set with the <guilabel>Generate DDL wizard</guilabel>. The <guilabel>Generate DDL</guilabel> wizard also allows you to automatically generate DDL for the database.
			</para>
			<figure>
				<title>Generate DDL Wizard</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/plugins/dali_integration6.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>In this way you can enable Hibernate runtime support in Eclipse JPA projects.</para>
		</section>
		<section id="hibernate_annotations_support">
			<title>Hibernate Annotations Support</title>
			<para>
				Hibernate Annotations are also supported in <guilabel>Dali Java Persistence Tools</guilabel>. The following annotations are integrated with the <guilabel>JPA Details</guilabel> view:
      </para>
			<itemizedlist>
				<listitem>
					<para>Id Generator annotations - <code>@GenericGenerator</code> and <code>@GeneratedValue</code>
					</para>
					<figure>
						<title>@GenericGenerator support in Dali</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/dali_integration7.png"/>
							</imageobject>
						</mediaobject>
					</figure>
					<figure>
						<title>@GeneratedValue support in Dali</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/dali_integration8.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>Property annotations - <code>@DiscriminatorFormula</code>, <code>@Generated</code>, <code>@Index</code>
					</para>
					<figure>
						<title>@Index support in Dali</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/dali_integration9.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>Mapping Queries annotations - <code>@NamedQuery</code> and <code>@NamedNativeQuery</code>
					</para>
					<figure>
						<title>Add New Named Query Dialog with Hibernate Support</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/dali_integration10.png"/>
							</imageobject>
						</mediaobject>
					</figure>
					<figure>
						<title>@NamedQuery support in Dali</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/dali_integration11.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>
						Association annotations in an <property>embeddable</property> object (<code>@OneToOne</code>, <code>@ManyToOne</code>, <code>@OneToMany</code> or <code>@ManyToMany</code>)
					</para>
					<figure>
						<title>Hibernate Support for Embeddable Object</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/plugins/dali_integration12.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
			</itemizedlist>
		<!--	<para>
				More information about Hibernate Annotations can be found in the <ulink url="http://docs.jboss.org/hibernate/stable/annotations/reference/en/html/">Hibernate Annotations Reference Guide</ulink>.
			</para> -->
		</section>
		<section>
			<title>Relevant Resources Links</title>
			<para>
				Find more information about native Dali plugin features on the <ulink url="http://help.eclipse.org/galileo/index.jsp?nav=/8">Eclipse Documentation page</ulink>.
      </para>
		</section>
	</section>
</chapter>
